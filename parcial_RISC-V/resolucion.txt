Ejercicio 1

Lo que hay que hacer aca es quedarse con los bits en indices impares de a, y para ello hago un AND entre el registro a1 y el registro temporal al que le cargué el inmediato 0x55555555, es decir, 0101 0101 ... en binario, que corresponde con las posiciones impares. Esto lo piso en el mismo registro a1, y luego a b, que es el registro a2, le resto a1, y esto luego se lo resto a accum, que es el registro a0. Entonces algebraicamente queda: accum - ( b - a) = accum + a - b, que es el resultado pedido.

Ejercicio 2

Primero cargo los inmediatos requeridos en los registros t0, t1 y t2. Luego, me quedo con el signo de a, que es el registro a1, haciendole un AND con 1000 0000 0000 0000, para quedarme un su bit de la posicion 16. Luego hago un branch, si no es igual a 0 (es decir, si 1 AND 1 = 1) entonces salto a la etiqueta extenderNegativo, pues significa que a era un numero con signo, y luego le extiendo el signo con 1s utilizando el registro temporal adecuado. Lo mismo en caso contrario, si a era un numero sin signo, entonces lo extiendo con 0s. Finalmente, retorno accum = accum + a_extendido + b.

Ejercicio 3

Lo que hago es hacer un AND de a1, que es index, y 1, para ver si el primer bit de a1 es 1 o 0, pues porque si es 1 significa que a0 es un número impar, y si es 0 significa que es un número par. Entonces cuando hago "beqz a1, esParIndice" lo que estoy haciendo es ver si el resultado del AND es igual a 0; si es así, significa que el primer bit de a1 era 0, lo que indica que es par, entonces ese branch me hace un salto relativo a la etiqueta esParIndice, que le cargará un 0 a a1 (pues esta funcion devuelve 0 si el indice es impar). En el otro caso, hago un salto a la etiqueta esImparIndice, donde le cargo un 1 a a1 ya que debo devolver 1 si el indice es un numero impar. Luego termina la funcion.

Ejercicio 4

Lo que hago es hacer un AND de a0 y 1 para ver si el primer bit de a0 es 1 o 0, pues porque si es 1 significa que a0 es un número impar, y si es 0 significa que es un número par. Entonces cuando hago "beqz a0, esPar" lo que estoy haciendo es ver si el resultado del AND es igual a 0; si es así, significa que el primer bit de a0 era 0, lo que indica que es par, entonces ese branch me hace un salto relativo a la etiqueta esPar, que le cargará un 1 a a0. Caso contrario, hago un jump relativo a la etiqueta esImpar, donde le cargo un 0 a a0 pues este es un número impar. Luego hago jump al final del código.
